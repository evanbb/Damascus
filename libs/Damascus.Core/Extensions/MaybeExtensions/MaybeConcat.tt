<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;

namespace Damascus.Core
{
    public static partial class MaybeExtensions
    {<# {
var totalGenericOverloads = 10; // this seems reasonable :|
var currentOverload = 1;

Func<string> getGenericArgs = () =>
{
    var result = new StringBuilder("T1");
    var current = 1;
    
    while (current++ < currentOverload)
    {
        result.Append($", T{current}");
    }
    
    return result.ToString();
};

Func<string> getSelectorTupleGenericArgs = () =>
{
    if (currentOverload == 2)
    {
        return "T1";
    }

    var result = new StringBuilder("T1");
    var current = 1;
    
    while (++current < currentOverload)
    {
        result.Append($", T{current}");
    }
    
    return $"({result.ToString()})";
};


Func<string> getReturnTupleGenericArgs = () =>
{
    var result = new StringBuilder("T1");
    var current = 1;
    
    while (++current <= currentOverload)
    {
        result.Append($", T{current}");
    }
    
    return $"({result.ToString()})";
};

Func<string> getMaybeItems = () =>
{
    if (currentOverload == 2)
    {
        return "Item1";
    }

    var result = new StringBuilder("Item1");
    var current = 1;
    
    while (++current < currentOverload)
    {
        result.Append($", Item{current}");
    }
    
    return result.ToString();
};

Func<string> getMaybeValueItems = () =>
{
    var result = getMaybeItems();
    
    if (currentOverload == 2)
    {
        return result;
    }
    
    return $"({result})";
};

while (currentOverload++ < totalGenericOverloads) { #>

        public static Maybe<<#= getReturnTupleGenericArgs() #>> Concat<<#= getGenericArgs() #>>(this Maybe<<#= getSelectorTupleGenericArgs() #>> maybe, Func<<#= getSelectorTupleGenericArgs() #>, Maybe<T<#= currentOverload #>>> selector)
        {
            selector.BetterNotBeNull("Selector");
            
            if (!maybe.HasValue)
            {
                return Maybe.Nothing;
            }
            
            var output = selector(maybe.Value);
            
            if (!output.HasValue)
            {
                return Maybe.Nothing;
            }
            
            var <#= getMaybeValueItems() #> = maybe.Value;
            
            return (<#= getMaybeItems() #>, output.Value);
        }
<# } #>
<# } #>
    }
}